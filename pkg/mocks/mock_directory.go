// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aserto-dev/go-grpc/aserto/authorizer/directory/v1 (interfaces: DirectoryClient,Directory_LoadUsersClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	directory "github.com/aserto-dev/go-grpc/aserto/authorizer/directory/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDirectoryClient is a mock of DirectoryClient interface.
type MockDirectoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryClientMockRecorder
}

// MockDirectoryClientMockRecorder is the mock recorder for MockDirectoryClient.
type MockDirectoryClientMockRecorder struct {
	mock *MockDirectoryClient
}

// NewMockDirectoryClient creates a new mock instance.
func NewMockDirectoryClient(ctrl *gomock.Controller) *MockDirectoryClient {
	mock := &MockDirectoryClient{ctrl: ctrl}
	mock.recorder = &MockDirectoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryClient) EXPECT() *MockDirectoryClientMockRecorder {
	return m.recorder
}

// CreateTenant mocks base method.
func (m *MockDirectoryClient) CreateTenant(arg0 context.Context, arg1 *directory.CreateTenantRequest, arg2 ...grpc.CallOption) (*directory.CreateTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTenant", varargs...)
	ret0, _ := ret[0].(*directory.CreateTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockDirectoryClientMockRecorder) CreateTenant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockDirectoryClient)(nil).CreateTenant), varargs...)
}

// CreateUser mocks base method.
func (m *MockDirectoryClient) CreateUser(arg0 context.Context, arg1 *directory.CreateUserRequest, arg2 ...grpc.CallOption) (*directory.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*directory.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDirectoryClientMockRecorder) CreateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDirectoryClient)(nil).CreateUser), varargs...)
}

// DeleteApplPermission mocks base method.
func (m *MockDirectoryClient) DeleteApplPermission(arg0 context.Context, arg1 *directory.DeleteApplPermissionRequest, arg2 ...grpc.CallOption) (*directory.DeleteApplPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplPermission", varargs...)
	ret0, _ := ret[0].(*directory.DeleteApplPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplPermission indicates an expected call of DeleteApplPermission.
func (mr *MockDirectoryClientMockRecorder) DeleteApplPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplPermission", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteApplPermission), varargs...)
}

// DeleteApplProperty mocks base method.
func (m *MockDirectoryClient) DeleteApplProperty(arg0 context.Context, arg1 *directory.DeleteApplPropertyRequest, arg2 ...grpc.CallOption) (*directory.DeleteApplPropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplProperty", varargs...)
	ret0, _ := ret[0].(*directory.DeleteApplPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplProperty indicates an expected call of DeleteApplProperty.
func (mr *MockDirectoryClientMockRecorder) DeleteApplProperty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplProperty", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteApplProperty), varargs...)
}

// DeleteApplRole mocks base method.
func (m *MockDirectoryClient) DeleteApplRole(arg0 context.Context, arg1 *directory.DeleteApplRoleRequest, arg2 ...grpc.CallOption) (*directory.DeleteApplRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplRole", varargs...)
	ret0, _ := ret[0].(*directory.DeleteApplRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplRole indicates an expected call of DeleteApplRole.
func (mr *MockDirectoryClientMockRecorder) DeleteApplRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplRole", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteApplRole), varargs...)
}

// DeleteResource mocks base method.
func (m *MockDirectoryClient) DeleteResource(arg0 context.Context, arg1 *directory.DeleteResourceRequest, arg2 ...grpc.CallOption) (*directory.DeleteResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResource", varargs...)
	ret0, _ := ret[0].(*directory.DeleteResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockDirectoryClientMockRecorder) DeleteResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteResource), varargs...)
}

// DeleteTenant mocks base method.
func (m *MockDirectoryClient) DeleteTenant(arg0 context.Context, arg1 *directory.DeleteTenantRequest, arg2 ...grpc.CallOption) (*directory.DeleteTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTenant", varargs...)
	ret0, _ := ret[0].(*directory.DeleteTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTenant indicates an expected call of DeleteTenant.
func (mr *MockDirectoryClientMockRecorder) DeleteTenant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenant", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteTenant), varargs...)
}

// DeleteUser mocks base method.
func (m *MockDirectoryClient) DeleteUser(arg0 context.Context, arg1 *directory.DeleteUserRequest, arg2 ...grpc.CallOption) (*directory.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*directory.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDirectoryClientMockRecorder) DeleteUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteUser), varargs...)
}

// DeleteUserApplication mocks base method.
func (m *MockDirectoryClient) DeleteUserApplication(arg0 context.Context, arg1 *directory.DeleteUserApplicationRequest, arg2 ...grpc.CallOption) (*directory.DeleteUserApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserApplication", varargs...)
	ret0, _ := ret[0].(*directory.DeleteUserApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserApplication indicates an expected call of DeleteUserApplication.
func (mr *MockDirectoryClientMockRecorder) DeleteUserApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserApplication", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteUserApplication), varargs...)
}

// DeleteUserPermission mocks base method.
func (m *MockDirectoryClient) DeleteUserPermission(arg0 context.Context, arg1 *directory.DeleteUserPermissionRequest, arg2 ...grpc.CallOption) (*directory.DeleteUserPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserPermission", varargs...)
	ret0, _ := ret[0].(*directory.DeleteUserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPermission indicates an expected call of DeleteUserPermission.
func (mr *MockDirectoryClientMockRecorder) DeleteUserPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermission", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteUserPermission), varargs...)
}

// DeleteUserProperty mocks base method.
func (m *MockDirectoryClient) DeleteUserProperty(arg0 context.Context, arg1 *directory.DeleteUserPropertyRequest, arg2 ...grpc.CallOption) (*directory.DeleteUserPropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserProperty", varargs...)
	ret0, _ := ret[0].(*directory.DeleteUserPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserProperty indicates an expected call of DeleteUserProperty.
func (mr *MockDirectoryClientMockRecorder) DeleteUserProperty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProperty", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteUserProperty), varargs...)
}

// DeleteUserRole mocks base method.
func (m *MockDirectoryClient) DeleteUserRole(arg0 context.Context, arg1 *directory.DeleteUserRoleRequest, arg2 ...grpc.CallOption) (*directory.DeleteUserRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserRole", varargs...)
	ret0, _ := ret[0].(*directory.DeleteUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockDirectoryClientMockRecorder) DeleteUserRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockDirectoryClient)(nil).DeleteUserRole), varargs...)
}

// GetApplPermissions mocks base method.
func (m *MockDirectoryClient) GetApplPermissions(arg0 context.Context, arg1 *directory.GetApplPermissionsRequest, arg2 ...grpc.CallOption) (*directory.GetApplPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplPermissions", varargs...)
	ret0, _ := ret[0].(*directory.GetApplPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplPermissions indicates an expected call of GetApplPermissions.
func (mr *MockDirectoryClientMockRecorder) GetApplPermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplPermissions", reflect.TypeOf((*MockDirectoryClient)(nil).GetApplPermissions), varargs...)
}

// GetApplProperties mocks base method.
func (m *MockDirectoryClient) GetApplProperties(arg0 context.Context, arg1 *directory.GetApplPropertiesRequest, arg2 ...grpc.CallOption) (*directory.GetApplPropertiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplProperties", varargs...)
	ret0, _ := ret[0].(*directory.GetApplPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplProperties indicates an expected call of GetApplProperties.
func (mr *MockDirectoryClientMockRecorder) GetApplProperties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplProperties", reflect.TypeOf((*MockDirectoryClient)(nil).GetApplProperties), varargs...)
}

// GetApplRoles mocks base method.
func (m *MockDirectoryClient) GetApplRoles(arg0 context.Context, arg1 *directory.GetApplRolesRequest, arg2 ...grpc.CallOption) (*directory.GetApplRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplRoles", varargs...)
	ret0, _ := ret[0].(*directory.GetApplRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplRoles indicates an expected call of GetApplRoles.
func (mr *MockDirectoryClientMockRecorder) GetApplRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplRoles", reflect.TypeOf((*MockDirectoryClient)(nil).GetApplRoles), varargs...)
}

// GetIdentity mocks base method.
func (m *MockDirectoryClient) GetIdentity(arg0 context.Context, arg1 *directory.GetIdentityRequest, arg2 ...grpc.CallOption) (*directory.GetIdentityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentity", varargs...)
	ret0, _ := ret[0].(*directory.GetIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockDirectoryClientMockRecorder) GetIdentity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockDirectoryClient)(nil).GetIdentity), varargs...)
}

// GetResource mocks base method.
func (m *MockDirectoryClient) GetResource(arg0 context.Context, arg1 *directory.GetResourceRequest, arg2 ...grpc.CallOption) (*directory.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*directory.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockDirectoryClientMockRecorder) GetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockDirectoryClient)(nil).GetResource), varargs...)
}

// GetUser mocks base method.
func (m *MockDirectoryClient) GetUser(arg0 context.Context, arg1 *directory.GetUserRequest, arg2 ...grpc.CallOption) (*directory.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*directory.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDirectoryClientMockRecorder) GetUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDirectoryClient)(nil).GetUser), varargs...)
}

// GetUserPermissions mocks base method.
func (m *MockDirectoryClient) GetUserPermissions(arg0 context.Context, arg1 *directory.GetUserPermissionsRequest, arg2 ...grpc.CallOption) (*directory.GetUserPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserPermissions", varargs...)
	ret0, _ := ret[0].(*directory.GetUserPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockDirectoryClientMockRecorder) GetUserPermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockDirectoryClient)(nil).GetUserPermissions), varargs...)
}

// GetUserProperties mocks base method.
func (m *MockDirectoryClient) GetUserProperties(arg0 context.Context, arg1 *directory.GetUserPropertiesRequest, arg2 ...grpc.CallOption) (*directory.GetUserPropertiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProperties", varargs...)
	ret0, _ := ret[0].(*directory.GetUserPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProperties indicates an expected call of GetUserProperties.
func (mr *MockDirectoryClientMockRecorder) GetUserProperties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProperties", reflect.TypeOf((*MockDirectoryClient)(nil).GetUserProperties), varargs...)
}

// GetUserRoles mocks base method.
func (m *MockDirectoryClient) GetUserRoles(arg0 context.Context, arg1 *directory.GetUserRolesRequest, arg2 ...grpc.CallOption) (*directory.GetUserRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserRoles", varargs...)
	ret0, _ := ret[0].(*directory.GetUserRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockDirectoryClientMockRecorder) GetUserRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockDirectoryClient)(nil).GetUserRoles), varargs...)
}

// GetValue mocks base method.
func (m *MockDirectoryClient) GetValue(arg0 context.Context, arg1 *directory.GetValueRequest, arg2 ...grpc.CallOption) (*directory.GetValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValue", varargs...)
	ret0, _ := ret[0].(*directory.GetValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockDirectoryClientMockRecorder) GetValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockDirectoryClient)(nil).GetValue), varargs...)
}

// ListResources mocks base method.
func (m *MockDirectoryClient) ListResources(arg0 context.Context, arg1 *directory.ListResourcesRequest, arg2 ...grpc.CallOption) (*directory.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResources", varargs...)
	ret0, _ := ret[0].(*directory.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockDirectoryClientMockRecorder) ListResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockDirectoryClient)(nil).ListResources), varargs...)
}

// ListTenants mocks base method.
func (m *MockDirectoryClient) ListTenants(arg0 context.Context, arg1 *directory.ListTenantsRequest, arg2 ...grpc.CallOption) (*directory.ListTenantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTenants", varargs...)
	ret0, _ := ret[0].(*directory.ListTenantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTenants indicates an expected call of ListTenants.
func (mr *MockDirectoryClientMockRecorder) ListTenants(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTenants", reflect.TypeOf((*MockDirectoryClient)(nil).ListTenants), varargs...)
}

// ListUserApplications mocks base method.
func (m *MockDirectoryClient) ListUserApplications(arg0 context.Context, arg1 *directory.ListUserApplicationsRequest, arg2 ...grpc.CallOption) (*directory.ListUserApplicationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserApplications", varargs...)
	ret0, _ := ret[0].(*directory.ListUserApplicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserApplications indicates an expected call of ListUserApplications.
func (mr *MockDirectoryClientMockRecorder) ListUserApplications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserApplications", reflect.TypeOf((*MockDirectoryClient)(nil).ListUserApplications), varargs...)
}

// ListUsers mocks base method.
func (m *MockDirectoryClient) ListUsers(arg0 context.Context, arg1 *directory.ListUsersRequest, arg2 ...grpc.CallOption) (*directory.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(*directory.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockDirectoryClientMockRecorder) ListUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockDirectoryClient)(nil).ListUsers), varargs...)
}

// LoadUsers mocks base method.
func (m *MockDirectoryClient) LoadUsers(arg0 context.Context, arg1 ...grpc.CallOption) (directory.Directory_LoadUsersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadUsers", varargs...)
	ret0, _ := ret[0].(directory.Directory_LoadUsersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUsers indicates an expected call of LoadUsers.
func (mr *MockDirectoryClientMockRecorder) LoadUsers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUsers", reflect.TypeOf((*MockDirectoryClient)(nil).LoadUsers), varargs...)
}

// SetApplPermission mocks base method.
func (m *MockDirectoryClient) SetApplPermission(arg0 context.Context, arg1 *directory.SetApplPermissionRequest, arg2 ...grpc.CallOption) (*directory.SetApplPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApplPermission", varargs...)
	ret0, _ := ret[0].(*directory.SetApplPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplPermission indicates an expected call of SetApplPermission.
func (mr *MockDirectoryClientMockRecorder) SetApplPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplPermission", reflect.TypeOf((*MockDirectoryClient)(nil).SetApplPermission), varargs...)
}

// SetApplPermissions mocks base method.
func (m *MockDirectoryClient) SetApplPermissions(arg0 context.Context, arg1 *directory.SetApplPermissionsRequest, arg2 ...grpc.CallOption) (*directory.SetApplPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApplPermissions", varargs...)
	ret0, _ := ret[0].(*directory.SetApplPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplPermissions indicates an expected call of SetApplPermissions.
func (mr *MockDirectoryClientMockRecorder) SetApplPermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplPermissions", reflect.TypeOf((*MockDirectoryClient)(nil).SetApplPermissions), varargs...)
}

// SetApplProperties mocks base method.
func (m *MockDirectoryClient) SetApplProperties(arg0 context.Context, arg1 *directory.SetApplPropertiesRequest, arg2 ...grpc.CallOption) (*directory.SetApplPropertiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApplProperties", varargs...)
	ret0, _ := ret[0].(*directory.SetApplPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplProperties indicates an expected call of SetApplProperties.
func (mr *MockDirectoryClientMockRecorder) SetApplProperties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplProperties", reflect.TypeOf((*MockDirectoryClient)(nil).SetApplProperties), varargs...)
}

// SetApplProperty mocks base method.
func (m *MockDirectoryClient) SetApplProperty(arg0 context.Context, arg1 *directory.SetApplPropertyRequest, arg2 ...grpc.CallOption) (*directory.SetApplPropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApplProperty", varargs...)
	ret0, _ := ret[0].(*directory.SetApplPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplProperty indicates an expected call of SetApplProperty.
func (mr *MockDirectoryClientMockRecorder) SetApplProperty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplProperty", reflect.TypeOf((*MockDirectoryClient)(nil).SetApplProperty), varargs...)
}

// SetApplRole mocks base method.
func (m *MockDirectoryClient) SetApplRole(arg0 context.Context, arg1 *directory.SetApplRoleRequest, arg2 ...grpc.CallOption) (*directory.SetApplRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApplRole", varargs...)
	ret0, _ := ret[0].(*directory.SetApplRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplRole indicates an expected call of SetApplRole.
func (mr *MockDirectoryClientMockRecorder) SetApplRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplRole", reflect.TypeOf((*MockDirectoryClient)(nil).SetApplRole), varargs...)
}

// SetApplRoles mocks base method.
func (m *MockDirectoryClient) SetApplRoles(arg0 context.Context, arg1 *directory.SetApplRolesRequest, arg2 ...grpc.CallOption) (*directory.SetApplRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetApplRoles", varargs...)
	ret0, _ := ret[0].(*directory.SetApplRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplRoles indicates an expected call of SetApplRoles.
func (mr *MockDirectoryClientMockRecorder) SetApplRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplRoles", reflect.TypeOf((*MockDirectoryClient)(nil).SetApplRoles), varargs...)
}

// SetResource mocks base method.
func (m *MockDirectoryClient) SetResource(arg0 context.Context, arg1 *directory.SetResourceRequest, arg2 ...grpc.CallOption) (*directory.SetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetResource", varargs...)
	ret0, _ := ret[0].(*directory.SetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResource indicates an expected call of SetResource.
func (mr *MockDirectoryClientMockRecorder) SetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResource", reflect.TypeOf((*MockDirectoryClient)(nil).SetResource), varargs...)
}

// SetUserPermission mocks base method.
func (m *MockDirectoryClient) SetUserPermission(arg0 context.Context, arg1 *directory.SetUserPermissionRequest, arg2 ...grpc.CallOption) (*directory.SetUserPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserPermission", varargs...)
	ret0, _ := ret[0].(*directory.SetUserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserPermission indicates an expected call of SetUserPermission.
func (mr *MockDirectoryClientMockRecorder) SetUserPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPermission", reflect.TypeOf((*MockDirectoryClient)(nil).SetUserPermission), varargs...)
}

// SetUserPermissions mocks base method.
func (m *MockDirectoryClient) SetUserPermissions(arg0 context.Context, arg1 *directory.SetUserPermissionsRequest, arg2 ...grpc.CallOption) (*directory.SetUserPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserPermissions", varargs...)
	ret0, _ := ret[0].(*directory.SetUserPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserPermissions indicates an expected call of SetUserPermissions.
func (mr *MockDirectoryClientMockRecorder) SetUserPermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPermissions", reflect.TypeOf((*MockDirectoryClient)(nil).SetUserPermissions), varargs...)
}

// SetUserProperties mocks base method.
func (m *MockDirectoryClient) SetUserProperties(arg0 context.Context, arg1 *directory.SetUserPropertiesRequest, arg2 ...grpc.CallOption) (*directory.SetUserPropertiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserProperties", varargs...)
	ret0, _ := ret[0].(*directory.SetUserPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserProperties indicates an expected call of SetUserProperties.
func (mr *MockDirectoryClientMockRecorder) SetUserProperties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserProperties", reflect.TypeOf((*MockDirectoryClient)(nil).SetUserProperties), varargs...)
}

// SetUserProperty mocks base method.
func (m *MockDirectoryClient) SetUserProperty(arg0 context.Context, arg1 *directory.SetUserPropertyRequest, arg2 ...grpc.CallOption) (*directory.SetUserPropertyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserProperty", varargs...)
	ret0, _ := ret[0].(*directory.SetUserPropertyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserProperty indicates an expected call of SetUserProperty.
func (mr *MockDirectoryClientMockRecorder) SetUserProperty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserProperty", reflect.TypeOf((*MockDirectoryClient)(nil).SetUserProperty), varargs...)
}

// SetUserRole mocks base method.
func (m *MockDirectoryClient) SetUserRole(arg0 context.Context, arg1 *directory.SetUserRoleRequest, arg2 ...grpc.CallOption) (*directory.SetUserRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserRole", varargs...)
	ret0, _ := ret[0].(*directory.SetUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserRole indicates an expected call of SetUserRole.
func (mr *MockDirectoryClientMockRecorder) SetUserRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserRole", reflect.TypeOf((*MockDirectoryClient)(nil).SetUserRole), varargs...)
}

// SetUserRoles mocks base method.
func (m *MockDirectoryClient) SetUserRoles(arg0 context.Context, arg1 *directory.SetUserRolesRequest, arg2 ...grpc.CallOption) (*directory.SetUserRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserRoles", varargs...)
	ret0, _ := ret[0].(*directory.SetUserRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserRoles indicates an expected call of SetUserRoles.
func (mr *MockDirectoryClientMockRecorder) SetUserRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserRoles", reflect.TypeOf((*MockDirectoryClient)(nil).SetUserRoles), varargs...)
}

// UpdateUser mocks base method.
func (m *MockDirectoryClient) UpdateUser(arg0 context.Context, arg1 *directory.UpdateUserRequest, arg2 ...grpc.CallOption) (*directory.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*directory.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDirectoryClientMockRecorder) UpdateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDirectoryClient)(nil).UpdateUser), varargs...)
}

// MockDirectory_LoadUsersClient is a mock of Directory_LoadUsersClient interface.
type MockDirectory_LoadUsersClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectory_LoadUsersClientMockRecorder
}

// MockDirectory_LoadUsersClientMockRecorder is the mock recorder for MockDirectory_LoadUsersClient.
type MockDirectory_LoadUsersClientMockRecorder struct {
	mock *MockDirectory_LoadUsersClient
}

// NewMockDirectory_LoadUsersClient creates a new mock instance.
func NewMockDirectory_LoadUsersClient(ctrl *gomock.Controller) *MockDirectory_LoadUsersClient {
	mock := &MockDirectory_LoadUsersClient{ctrl: ctrl}
	mock.recorder = &MockDirectory_LoadUsersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectory_LoadUsersClient) EXPECT() *MockDirectory_LoadUsersClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockDirectory_LoadUsersClient) CloseAndRecv() (*directory.LoadUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*directory.LoadUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockDirectory_LoadUsersClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockDirectory_LoadUsersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDirectory_LoadUsersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDirectory_LoadUsersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDirectory_LoadUsersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDirectory_LoadUsersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDirectory_LoadUsersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m *MockDirectory_LoadUsersClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDirectory_LoadUsersClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockDirectory_LoadUsersClient) Send(arg0 *directory.LoadUsersRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDirectory_LoadUsersClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockDirectory_LoadUsersClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDirectory_LoadUsersClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDirectory_LoadUsersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDirectory_LoadUsersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDirectory_LoadUsersClient)(nil).Trailer))
}
